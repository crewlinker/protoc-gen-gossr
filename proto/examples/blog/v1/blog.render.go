// Code generated by protoc-gen-gossr. DO NOT EDIT.

package blogv1

import (
	"embed"
	"fmt"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	"html/template"
	"io"
	"io/fs"
	"os"
)

func blogIndexTmplNames() []string {
	return []string{"testdata/_layout.html", "testdata/_main.html", "testdata/blog/index.html"}
}

//go:embed testdata/_layout.html testdata/_main.html testdata/blog/index.html
var blogIndexTmplFiles embed.FS

// RegisterBlogIndexTemplate registers the embedded template onto  the view.
func RegisterBlogIndexTemplate(view interface {
	Parse(fs.FS, string, ...string) (*template.Template, error)
	RegisterEmbedded(protoreflect.MessageDescriptor, *template.Template) error
}) error {
	tmpl, err := view.Parse(blogIndexTmplFiles, blogIndexTmplNames()[0], blogIndexTmplNames()[1:]...)
	if err != nil {
		return fmt.Errorf("failed to parse: %w", err)
	}
	err = view.RegisterEmbedded((&BlogIndex{}).ProtoReflect().Descriptor(), tmpl)
	if err != nil {
		return fmt.Errorf("failed to register: %w", err)
	}
	return nil
}

// Render renders the message using a template.
func (x *BlogIndex) Render(wrt io.Writer, view interface {
	LiveDir() string
	Parse(fs.FS, string, ...string) (*template.Template, error)
	Embedded(protoreflect.MessageDescriptor) (*template.Template, error)
}) error {
	tmpl, err := view.Embedded(x.ProtoReflect().Descriptor())
	if err != nil {
		return fmt.Errorf("failed to get embedded template: %w", err)
	}
	if liveDir := view.LiveDir(); liveDir != "" {
		tmpl, err = view.Parse(os.DirFS(liveDir), blogIndexTmplNames()[0], blogIndexTmplNames()[1:]...)
		if err != nil {
			return fmt.Errorf("failed to parse template: %w", err)
		}
	}
	err = tmpl.Execute(wrt, x)
	if err != nil {
		return fmt.Errorf("failed to get execute template: %w", err)
	}
	return nil
}
func blogAuthorTmplNames() []string {
	return []string{"testdata/partials/blog_author.html"}
}

//go:embed testdata/partials/blog_author.html
var blogAuthorTmplFiles embed.FS

// RegisterBlogAuthorTemplate registers the embedded template onto  the view.
func RegisterBlogAuthorTemplate(view interface {
	Parse(fs.FS, string, ...string) (*template.Template, error)
	RegisterEmbedded(protoreflect.MessageDescriptor, *template.Template) error
}) error {
	tmpl, err := view.Parse(blogAuthorTmplFiles, blogAuthorTmplNames()[0], blogAuthorTmplNames()[1:]...)
	if err != nil {
		return fmt.Errorf("failed to parse: %w", err)
	}
	err = view.RegisterEmbedded((&BlogAuthor{}).ProtoReflect().Descriptor(), tmpl)
	if err != nil {
		return fmt.Errorf("failed to register: %w", err)
	}
	return nil
}

// Render renders the message using a template.
func (x *BlogAuthor) Render(wrt io.Writer, view interface {
	LiveDir() string
	Parse(fs.FS, string, ...string) (*template.Template, error)
	Embedded(protoreflect.MessageDescriptor) (*template.Template, error)
}) error {
	tmpl, err := view.Embedded(x.ProtoReflect().Descriptor())
	if err != nil {
		return fmt.Errorf("failed to get embedded template: %w", err)
	}
	if liveDir := view.LiveDir(); liveDir != "" {
		tmpl, err = view.Parse(os.DirFS(liveDir), blogAuthorTmplNames()[0], blogAuthorTmplNames()[1:]...)
		if err != nil {
			return fmt.Errorf("failed to parse template: %w", err)
		}
	}
	err = tmpl.Execute(wrt, x)
	if err != nil {
		return fmt.Errorf("failed to get execute template: %w", err)
	}
	return nil
}
func fooTmplNames() []string {
	return []string{"testdata/foo.html"}
}

//go:embed testdata/foo.html
var fooTmplFiles embed.FS

// RegisterFooTemplate registers the embedded template onto  the view.
func RegisterFooTemplate(view interface {
	Parse(fs.FS, string, ...string) (*template.Template, error)
	RegisterEmbedded(protoreflect.MessageDescriptor, *template.Template) error
}) error {
	tmpl, err := view.Parse(fooTmplFiles, fooTmplNames()[0], fooTmplNames()[1:]...)
	if err != nil {
		return fmt.Errorf("failed to parse: %w", err)
	}
	err = view.RegisterEmbedded((&Foo{}).ProtoReflect().Descriptor(), tmpl)
	if err != nil {
		return fmt.Errorf("failed to register: %w", err)
	}
	return nil
}

// Render renders the message using a template.
func (x *Foo) Render(wrt io.Writer, view interface {
	LiveDir() string
	Parse(fs.FS, string, ...string) (*template.Template, error)
	Embedded(protoreflect.MessageDescriptor) (*template.Template, error)
}) error {
	tmpl, err := view.Embedded(x.ProtoReflect().Descriptor())
	if err != nil {
		return fmt.Errorf("failed to get embedded template: %w", err)
	}
	if liveDir := view.LiveDir(); liveDir != "" {
		tmpl, err = view.Parse(os.DirFS(liveDir), fooTmplNames()[0], fooTmplNames()[1:]...)
		if err != nil {
			return fmt.Errorf("failed to parse template: %w", err)
		}
	}
	err = tmpl.Execute(wrt, x)
	if err != nil {
		return fmt.Errorf("failed to get execute template: %w", err)
	}
	return nil
}
